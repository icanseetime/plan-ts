openapi: 3.0.0
servers:
    - description: Plan-ts API
      url: https://plan-ts.herokuapp.com/api
    - description: Development testing
      url: http://localhost:5000/api
info:
    description: Plant care system
    version: '1.0.0'
    title: Plan-ts API
    contact:
        email: 'imgjeits@stud.ntnu.no'
    license:
        name: Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)
        url: 'https://creativecommons.org/licenses/by-nd/3.0/'
tags:
    - name: managers
      description: Only available to users with manager role
    - name: gardeners
      description: Available to all authenticated users (managers, gardeners)
    - name: self
      description: Only available for the user that is authenticated with the same ID
    - name: all
      description: Available for everyone
    - name: plants
      description: Plant routes
    - name: users
      description: User routes
    - name: invites
      description: New user invite routes
    - name: locations
      description: Location routes
    - name: feedback
      description: Feedback routes
    - name: pictures
      description: Picture upload routes
paths:
    /plants:
        get:
            summary: Lists plants
            tags:
                - all
                - plants
            description: Get a list of plants in the system, sorted alphabetically by name. List can be filtered by using queries. No query will return a list of all the plants.
            operationId: listPlants
            responses:
                '200':
                    description: List of plants matching criteria
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    properties:
                                        health:
                                            $ref: '#/components/schemas/Plant/properties/health'
                                        picture:
                                            $ref: '#/components/schemas/Plant/properties/picture'
                                        _id:
                                            type: string
                                            example: '607dde78081f316f0473f7fb'
                                        name:
                                            $ref: '#/components/schemas/Plant/properties/name'
                                        location:
                                            $ref: '#/components/schemas/Location'
                                        createdAt:
                                            $ref: '#/components/schemas/Plant/properties/createdAt'
                                        updatedAt:
                                            $ref: '#/components/schemas/Plant/properties/updatedAt'
                                        __v:
                                            type: number
                '404':
                    description: Could not find any plants based on query
                '500':
                    description: Something went wrong on the server. Will include error message from server
        post:
            summary: Add new plant
            tags:
                - managers
                - plants
            description: Create a new plant and add it to the database.
            operationId: createPlant
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    $ref: '#/components/schemas/Plant/properties/name'
                                location:
                                    $ref: '#/components/schemas/Plant/properties/location'
                                picture:
                                    $ref: '#/components/schemas/Plant/properties/picture'
                                notes:
                                    $ref: '#/components/schemas/Plant/properties/notes'
                                waterDaysBetween:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/water/properties/days_between'
                                waterAmount:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/water/properties/amount'
                                waterDue:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/water/properties/due'
                                fertilizerDaysBetween:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/fertilizer/properties/days_between'
                                fertilizerAmount:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/fertilizer/properties/days_between'
                                fertilizerDue:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/fertilizer/properties/days_between'
                                lightAmount:
                                    $ref: '#/components/schemas/Plant/properties/health/properties/light/properties/amount'
            responses:
                '201':
                    description: Successful plant creation
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'New plant successfully created.'
                                    plant:
                                        properties:
                                            _id:
                                                type: string
                                            name:
                                                type: string
                                            location:
                                                type: string
                                            picture:
                                                type: string
                                            health:
                                                type: object
                                                properties:
                                                    water:
                                                        type: object
                                                        properties:
                                                            days_between:
                                                                type: number
                                                            amount:
                                                                type: number
                                                            due:
                                                                type: string
                                                                format: date-time
                                                    fertilizer:
                                                        type: object
                                                        properties:
                                                            days_between:
                                                                type: number
                                                            amount:
                                                                type: number
                                                            due:
                                                                type: string
                                                                format: date-time
                                                    light:
                                                        type: object
                                                        properties:
                                                            amount:
                                                                type: number
                                            createdAt:
                                                type: string
                                                format: date-time
                                            updatedAt:
                                                type: string
                                                format: date-time
                                            __v:
                                                type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '500':
                    description: Something went wrong on the server. Will include error message from server
    /plants/notifications:
        get:
            summary: Get plants that have tasks due
            tags:
                - gardeners
                - plants
            description: Get array of plant objects where the plant needs watering/fertilizing. Will return one array for each of the types. Can also find plants that have tasks due between now and the next *x* amount of days.
            operationId: pastDue
            security:
                - bearerAuth: []
            parameters:
                - in: query
                  name: days
                  description: How many days ahead
                  required: false
                  schema:
                      type: string
                      example: 2
            responses:
                '200':
                    description: Successful query returning two arrays
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    water:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                health:
                                                    type: object
                                                    properties:
                                                        water:
                                                            $ref: '#/components/schemas/Plant/properties/health/properties/water'
                                                _id:
                                                    type: string
                                                    example: '6075b45e72d09a3aacc2eafc'
                                                name:
                                                    $ref: '#/components/schemas/Plant/properties/name'
                                                location:
                                                    $ref: '#/components/schemas/Location'
                                    fertilize:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                health:
                                                    type: object
                                                    properties:
                                                        water:
                                                            $ref: '#/components/schemas/Plant/properties/health/properties/water'
                                                _id:
                                                    type: string
                                                    example: '6075b45e72d09a3aacc2eafc'
                                                name:
                                                    $ref: '#/components/schemas/Plant/properties/name'
                                                location:
                                                    $ref: '#/components/schemas/Location'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: No plants with tasks due
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any plants with tasks past due at this time.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find plants. [SERVER ERROR MESSAGE]'
    /plants/notifications/count:
        get:
            summary: Get number of notifications
            tags:
                - gardeners
                - plants
            description: Counts the number of tasks due (not the number of plants)
            operationId: noOfNotifications
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query returning object with count
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    count:
                                        type: number
                                        example: 3
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: No tasks due
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any tasks due at this time.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find tasks due. [SERVER ERROR MESSAGE]'
    /plants/search:
        get:
            summary: Search plants by name
            tags:
                - all
                - plants
            description: Search for plant by name, or parts of the name
            operationId: searchPlants
            parameters:
                - in: query
                  name: searchField
                  description: Search string
                  required: true
                  schema:
                      type: string
                      example: 'succulent'
            responses:
                '200':
                    description: Successful search
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    properties:
                                        health:
                                            $ref: '#/components/schemas/Plant/properties/health'
                                        picture:
                                            $ref: '#/components/schemas/Plant/properties/picture'
                                        _id:
                                            type: string
                                            example: '607dde78081f316f0473f7fb'
                                        name:
                                            $ref: '#/components/schemas/Plant/properties/name'
                                        location:
                                            $ref: '#/components/schemas/Location'
                                        createdAt:
                                            $ref: '#/components/schemas/Plant/properties/createdAt'
                                        updatedAt:
                                            $ref: '#/components/schemas/Plant/properties/updatedAt'
                                        __v:
                                            type: number
                '400':
                    description: No search string
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Query needs to include a searchField value.'
                '404':
                    description: No plants found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Search did not match any of the plants.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to search for plants. [SERVER ERROR MESSAGE].'
    /plants/{id}:
        get:
            summary: Get information about specific plant
            tags:
                - all
                - plants
            description: Get information about a specific plant by its ID.
            operationId: getPlant
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: '6086c0b2e00c2a888c26af05'
            responses:
                '200':
                    description: Successful query returning plant object
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    health:
                                        $ref: '#/components/schemas/Plant/properties/health'
                                    picture:
                                        $ref: '#/components/schemas/Plant/properties/picture'
                                    _id:
                                        type: string
                                        example: '607dde78081f316f0473f7fb'
                                    name:
                                        $ref: '#/components/schemas/Plant/properties/name'
                                    location:
                                        $ref: '#/components/schemas/Location'
                                    createdAt:
                                        $ref: '#/components/schemas/Plant/properties/createdAt'
                                    updatedAt:
                                        $ref: '#/components/schemas/Plant/properties/updatedAt'
                                    __v:
                                        type: number
                '404':
                    description: Could not find plant
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Plant not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for plant with ID 607dde78081f316f0473f7fb. [SERVER ERROR MESSAGE].'
        put:
            summary: Update plant details
            tags:
                - plants
                - managers
            description: Update plant details
            operationId: updatePlant
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: '6086c0b2e00c2a888c26af05'
            responses:
                '201':
                    description: Successful update
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Plant with ID 606b7b5993e1ee1504b037e1 was successfully updated.'
                '400':
                    description: Bad request, includes information that should not be updated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        enum:
                                            - 'Request should not include location. Use route for moving plants to update the location.'
                                            - 'Request should not include history. History array will be updated automatically in other routes.'
                '404':
                    description: No plant found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find plant with ID 606b7b5993e1ee1504b037e1.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to update plant with ID 606b7b5993e1ee1504b037e1. [SERVER ERROR MESSAGE]'
        delete:
            summary: Delete plant
            tags:
                - plants
                - managers
            description: Delete specific plant by its ID
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the plant
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            operationId: deletePlant
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: 'Successfully deleted the plant.'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Plant with ID 606b7b5993e1ee1504b037e1 deleted successfully.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find plant.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'There is no plant with this ID in the database.'
                '500':
                    description: Something went wrong on the server. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to delete the plant. [SERVER ERROR MESSAGE]'
    /plants/{id}/notes:
        get:
            summary: Get plant notes
            tags:
                - gardeners
                - plants
            description: Get notes connected to specific plant by its ID
            operationId: plantNotes
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: '6086c0b2e00c2a888c26af05'
            responses:
                '200':
                    description: Successful query returning notes object
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    notes:
                                        $ref: '#/components/schemas/Plant/properties/notes'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the plant
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Plant not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for notes connected to plant with ID 607dde78081f316f0473f7fb. [SERVER ERROR MESSAGE].'
    /plants/{id}/history:
        get:
            summary: Get plant history
            tags:
                - gardeners
                - plants
            description: Get history connected to specific plant by its ID
            operationId: plantHistory
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            responses:
                '200':
                    description: Successful query returning history object
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                        example: 60770e1f23903c59c8dee276
                                    type:
                                        $ref: '#/components/schemas/Plant/properties/history/items/properties/type'
                                    user_id:
                                        type: object
                                        properties:
                                            name:
                                                $ref: '#/components/schemas/User/properties/name'
                                            _id:
                                                type: string
                                                example: 60770e1f23903c59c8dee276
                                    date:
                                        $ref: '#/components/schemas/Plant/properties/history/items/properties/date'
                                    note:
                                        $ref: '#/components/schemas/Plant/properties/history/items/properties/note'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the plant
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Plant not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for history connected to plant with ID 607dde78081f316f0473f7fb. [SERVER ERROR MESSAGE].'
    /plants/{id}/water:
        put:
            summary: Water plant
            tags:
                - plants
                - gardeners
            description: Adds a new "water" log to the history array and updates the due date for when the plant next needs watering
            operationId: waterPlant
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Succesfully added to history.'
                                    plant:
                                        type: object
                                        properties:
                                            health:
                                                $ref: '#/components/schemas/Plant/properties/health'
                                            picture:
                                                $ref: '#/components/schemas/Plant/properties/picture'
                                            _id:
                                                type: string
                                                example: '607dde78081f316f0473f7fb'
                                            name:
                                                $ref: '#/components/schemas/Plant/properties/name'
                                            location:
                                                $ref: '#/components/schemas/Plant/properties/location'
                                            notes:
                                                $ref: '#/components/schemas/Plant/properties/notes'
                                            history:
                                                $ref: '#/components/schemas/Plant/properties/history'
                                            createdAt:
                                                $ref: '#/components/schemas/Plant/properties/createdAt'
                                            updatedAt:
                                                $ref: '#/components/schemas/Plant/properties/updatedAt'
                                            __v:
                                                type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the plant
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Plant not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to water the plant with ID 607dde78081f316f0473f7fb. [SERVER ERROR MESSAGE].'
    /plants/{id}/fertilize:
        put:
            summary: Fertilize plant
            tags:
                - plants
                - gardeners
            description: Adds a new "fertilize" log to the history array and updates the due date for when the plant next needs fertilizing
            operationId: fertilizePlant
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Succesfully added to history.'
                                    plant:
                                        type: object
                                        properties:
                                            health:
                                                $ref: '#/components/schemas/Plant/properties/health'
                                            picture:
                                                $ref: '#/components/schemas/Plant/properties/picture'
                                            _id:
                                                type: string
                                                example: '607dde78081f316f0473f7fb'
                                            name:
                                                $ref: '#/components/schemas/Plant/properties/name'
                                            location:
                                                $ref: '#/components/schemas/Plant/properties/location'
                                            notes:
                                                $ref: '#/components/schemas/Plant/properties/notes'
                                            history:
                                                $ref: '#/components/schemas/Plant/properties/history'
                                            createdAt:
                                                $ref: '#/components/schemas/Plant/properties/createdAt'
                                            updatedAt:
                                                $ref: '#/components/schemas/Plant/properties/updatedAt'
                                            __v:
                                                type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the plant
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Plant not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to fertilize the plant with ID 607dde78081f316f0473f7fb. [SERVER ERROR MESSAGE].'
    /plants/{id}/move:
        put:
            summary: Move plant
            tags:
                - plants
                - gardeners
            description: Adds a new "move" log to the history array and updates the location of the plant
            operationId: movePlant
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  description: ObjectID of the plant
                  required: true
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            requestBody:
                description: A JSON object containing the new location room uid of the plant
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                location:
                                    $ref: '#/components/schemas/Location/properties/_id'
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Succesfully moved plant and added to history.'
                                    plant:
                                        type: object
                                        properties:
                                            health:
                                                $ref: '#/components/schemas/Plant/properties/health'
                                            picture:
                                                $ref: '#/components/schemas/Plant/properties/picture'
                                            _id:
                                                type: string
                                                example: '607dde78081f316f0473f7fb'
                                            name:
                                                $ref: '#/components/schemas/Plant/properties/name'
                                            location:
                                                $ref: '#/components/schemas/Plant/properties/location'
                                            notes:
                                                $ref: '#/components/schemas/Plant/properties/notes'
                                            history:
                                                $ref: '#/components/schemas/Plant/properties/history'
                                            createdAt:
                                                $ref: '#/components/schemas/Plant/properties/createdAt'
                                            updatedAt:
                                                $ref: '#/components/schemas/Plant/properties/updatedAt'
                                            __v:
                                                type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the plant
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Plant not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to move the plant with ID 607dde78081f316f0473f7fb. [SERVER ERROR MESSAGE].'
    /users:
        get:
            summary: List users
            tags:
                - users
                - managers
            description: Get a list of all users, based on query. No query will return a list of all users. The list will be sorted alphabetically by the users first name.
            operationId: listUsers
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query, returns a list of users.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        name:
                                            $ref: '#/components/schemas/User/properties/name'
                                        _id:
                                            type: string
                                            example: '606b7b5993e1ee1504b037e1'
                                        email:
                                            $ref: '#/components/schemas/User/properties/email'
                                        role:
                                            $ref: '#/components/schemas/User/properties/role'
                                        createdAt:
                                            $ref: '#/components/schemas/User/properties/createdAt'
                                        updatedAt:
                                            $ref: '#/components/schemas/User/properties/updatedAt'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: No users found.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any users.'
                '500':
                    description: Something went wrong on the server. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find users. [SERVER ERROR MESSAGE]'
        post:
            summary: Add new user
            tags:
                - users
                - all
            description: Register new user. Checks for existing invite.
            operationId: registerUser
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    $ref: '#/components/schemas/User/properties/email'
                                password:
                                    $ref: '#/components/schemas/User/properties/password'
                                firstName:
                                    type: string
                                    example: 'Jane'
                                lastName:
                                    type: string
                                    example: 'Doe'
                                role:
                                    $ref: '#/components/schemas/User/properties/role'

            responses:
                '201':
                    description: 'Successful user registration'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'New user successfully created.'
                                    user:
                                        type: object
                                        properties:
                                            _id:
                                                type: string
                                                example: '607f17edeb7f3847c8b1e842'
                                            email:
                                                $ref: '#/components/schemas/User/properties/email'
                                            password:
                                                $ref: '#/components/schemas/User/properties/email'
                                            name:
                                                $ref: '#/components/schemas/User/properties/name'
                                            role:
                                                $ref: '#/components/schemas/User/properties/role'
                                            createdAt:
                                                $ref: '#/components/schemas/User/properties/createdAt'
                                            updatedAt:
                                                $ref: '#/components/schemas/User/properties/updatedAt'
                                            __v:
                                                type: number
                '409':
                    description: No invite connected to e-mail.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: "Invite doesn't exist or was previously deleted, therefore user can not be registered at this time."
                '500':
                    description: Server error.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'There was an error adding test@ntnu.no to the database. [SERVER ERROR MESSAGE]'
    /users/{id}:
        get:
            summary: Get information about own profile
            tags:
                - users
                - self
            description: User can get information about their own user profile details. Does not include the password or object version.
            operationId: getSelf
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the user
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query, returns the user object
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name:
                                        $ref: '#/components/schemas/User/properties/name'
                                    _id:
                                        type: string
                                        example: '606b7b5993e1ee1504b037e1'
                                    email:
                                        $ref: '#/components/schemas/User/properties/email'
                                    role:
                                        $ref: '#/components/schemas/User/properties/role'
                                    createdAt:
                                        $ref: '#/components/schemas/User/properties/createdAt'
                                    updatedAt:
                                        $ref: '#/components/schemas/User/properties/updatedAt'
                '400':
                    description: No access. The user ID of the logged in user does not match the user ID of the profile that is being fetched
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'No access.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'User not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for user with ID 606b7b5993e1ee1504b037e1. [SERVER ERROR MESSAGE]'
        put:
            summary: Update own profile
            tags:
                - users
                - self
            description: Users can update their own profile details, except for their role
            operationId: updateSelf
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the user
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            security:
                - bearerAuth: []
            requestBody:
                description: Only include properties of the user that should be updated. The key name of nested properties, like first name should be written `name.first`
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    $ref: '#/components/schemas/User/properties/email'
                                password:
                                    $ref: '#/components/schemas/User/properties/password'
                                'name.first':
                                    $ref: '#/components/schemas/User/properties/name/properties/first'
                                'name.last':
                                    $ref: '#/components/schemas/User/properties/name/properties/last'
            responses:
                '201':
                    description: Successful query, updates the user object and returns a success message
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User with ID 606b7b5993e1ee1504b037e1 was successfully updated.'
                '400':
                    description: User is trying to change another users profile, user is trying to change their own role or the request is missing update values
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        enum:
                                            - You can not change your own user role.
                                            - You need to include update values in a request body.
                                            - No access.
                                        example: 'No access.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: No user found in database
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Could not find user with ID 606b7b5993e1ee1504b037e1.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Something went wrong while trying to update user with ID 606b7b5993e1ee1504b037e1. [SERVER ERROR MESSAGE]'
    /users/{id}/manage:
        get:
            summary: Get information about specific user
            tags:
                - users
                - managers
            description: Get information about a specific user by their ID. Does not include the password or object version.
            operationId: getUser
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the user
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query, returns the user object.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name:
                                        $ref: '#/components/schemas/User/properties/name'
                                    _id:
                                        type: string
                                        example: '606b7b5993e1ee1504b037e1'
                                    email:
                                        $ref: '#/components/schemas/User/properties/email'
                                    role:
                                        $ref: '#/components/schemas/User/properties/role'
                                    createdAt:
                                        $ref: '#/components/schemas/User/properties/createdAt'
                                    updatedAt:
                                        $ref: '#/components/schemas/User/properties/updatedAt'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the user.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'User not found.'
                '500':
                    description: Something went wrong on the server. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for user with ID 606b7b5993e1ee1504b037e1. [SERVER ERROR MESSAGE]'
        delete:
            summary: Delete user
            tags:
                - users
                - managers
            description: Delete specific user by their ID
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the user
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            operationId: deleteUser
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: 'Successfully deleted the user.'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User with ID 606b7b5993e1ee1504b037e1 deleted successfully.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find user.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'There is no user with this ID in the database.'
                '500':
                    description: Something went wrong on the server. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to delete the user. [SERVER ERROR MESSAGE]'
    /users/{id}/role:
        put:
            summary: Update user role
            tags:
                - users
                - managers
            description: Change the role of specific user
            operationId: changeRole
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the user
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            security:
                - bearerAuth: []
            requestBody:
                description: New role of the user
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                role:
                                    $ref: '#/components/schemas/User/properties/role'
            responses:
                '201':
                    description: Successful query, returns a success message
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Successfully changed role of user with ID 60830494708e37562cc2408c.'
                '400':
                    description: No role included in request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'You need to include the new role in the body of your request.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: No user found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find user with ID 60830494708e37562cc2408c.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to update the user role. [SERVER ERROR MESSAGE]'
    /users/invites:
        get:
            summary: List user invites
            tags:
                - users
                - invites
                - managers
            description: List all user invites, can be filtered by query
            operationId: listInvites
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query, returns list of invites
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        _id:
                                            type: string
                                            example: '606b7b5993e1ee1504b037e1'
                                        email:
                                            $ref: '#/components/schemas/Invite/properties/email'
                                        role:
                                            $ref: '#/components/schemas/Invite/properties/role'
                                        invited_by:
                                            type: object
                                            properties:
                                                name:
                                                    $ref: '#/components/schemas/User/properties/name'
                                                _id:
                                                    $ref: '#/components/schemas/Invite/properties/invited_by'
                                        createdAt:
                                            $ref: '#/components/schemas/Invite/properties/createdAt'
                                        updatedAt:
                                            $ref: '#/components/schemas/Invite/properties/updatedAt'
                                        __v:
                                            type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: No invites found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any invites.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find invites. [SERVER ERROR MESSAGE]'
        post:
            summary: Invite new user
            tags:
                - users
                - invites
                - managers
            description: Create an invite for a new user.
            operationId: inviteUser
            security:
                - bearerAuth: []
            requestBody:
                description: Details about the invite
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    $ref: '#/components/schemas/Invite/properties/email'
                                role:
                                    $ref: '#/components/schemas/Invite/properties/role'
                                invited_by:
                                    $ref: '#/components/schemas/Invite/properties/invited_by'
            responses:
                '201':
                    description: Successfully created new invite, returns the invite and a success message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'New invite successfully created.'
                                    invite:
                                        type: object
                                        properties:
                                            _id:
                                                type: string
                                                example: '606b7b5993e1ee1504b037e1'
                                            email:
                                                $ref: '#/components/schemas/Invite/properties/email'
                                            role:
                                                $ref: '#/components/schemas/Invite/properties/role'
                                            invited_by:
                                                $ref: '#/components/schemas/Invite/properties/invited_by'
                                            createdAt:
                                                $ref: '#/components/schemas/Invite/properties/createdAt'
                                            updatedAt:
                                                $ref: '#/components/schemas/Invite/properties/updatedAt'
                                            __v:
                                                type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '409':
                    description: Either an invite connected to the provided e-mail already exists in the database or a user with the provided e-mail already exists in the database. Error message will provide more information.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'An invite connected to this email already exists in the database.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to create new invite. [SERVER ERROR MESSAGE]'
    /users/invites/{id}:
        get:
            summary: Get information about specific invite
            tags:
                - users
                - invites
                - all
            description: Get information about a specific invite by its ID.
            operationId: checkInvite
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the invite
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            responses:
                '200':
                    description: Successful query, returns the invite object.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                        example: '606b7b5993e1ee1504b037e1'
                                    email:
                                        $ref: '#/components/schemas/Invite/properties/email'
                                    role:
                                        $ref: '#/components/schemas/Invite/properties/role'
                                    invited_by:
                                        type: object
                                        properties:
                                            name:
                                                $ref: '#/components/schemas/User/properties/name'
                                            _id:
                                                $ref: '#/components/schemas/Invite/properties/invited_by'
                                    createdAt:
                                        $ref: '#/components/schemas/Invite/properties/createdAt'
                                    updatedAt:
                                        $ref: '#/components/schemas/Invite/properties/updatedAt'
                                    __v:
                                        type: number
                '404':
                    description: Could not find the invite.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'No invite with this ID.'
                '500':
                    description: Something went wrong on the server. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for invite with ID 606b7b5993e1ee1504b037e1. [SERVER ERROR MESSAGE]'
        delete:
            summary: Delete invite
            tags:
                - users
                - invites
                - managers
            description: Delete specific invite by ID
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the invite
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            operationId: deleteInvite
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: 'Successfully deleted invite.'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Successfully deleted invite.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '500':
                    description: Something went wrong on the server. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to delete invite. [SERVER ERROR MESSAGE]'
    /users/login:
        post:
            summary: Login user
            tags:
                - users
                - all
            description: Login user and get JSON Web Token.
            operationId: loginUser
            requestBody:
                description: E-mail and password
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    $ref: '#/components/schemas/User/properties/email'
                                password:
                                    $ref: '#/components/schemas/User/properties/password'
            responses:
                '200':
                    description: Successful login, returns JWT.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                '500':
                    description: Something went wrong on the server or the login was unsuccessful. Will include server error message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Error: Could not find user.'
    /users/forgotten-password:
        post:
            summary: New password reset request
            tags:
                - users
                - all
            description: Request for when the user has forgotten their password. Deletes any old request associated with the user and creates a new one, as well as emails the user a link where they can reset their password.
            operationId: requestPasswordChange
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    $ref: '#/components/schemas/User/properties/email'
            responses:
                '200':
                    description: Successfully created request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Successfully created request and sent email to user.'
                '400':
                    description: Missing email
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'You need to include an email in your request.'
                '404':
                    description: No user connected to the given email
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User with this email not found.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to create a password change request. [SERVER ERROR MESSAGE]'
    /locations:
        get:
            summary: List all locations
            tags:
                - locations
                - all
            description: Get a list of all locations objects in the database
            operationId: listLocations
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Location'
                '404':
                    description: Locations not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any locations.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find locations. [SERVER ERROR MESSAGE]'
        post:
            summary: Add new location
            tags:
                - locations
                - managers
            description: Add new location
            operationId: createLocation
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                room:
                                    $ref: '#/components/schemas/Location/properties/room'
                                floor:
                                    $ref: '#/components/schemas/Location/properties/floor'
                                building:
                                    $ref: '#/components/schemas/Location/properties/building'
                                mazemap_link:
                                    $ref: '#/components/schemas/Location/properties/mazemap_link'
                                mazemap_embed:
                                    $ref: '#/components/schemas/Location/properties/mazemap_embed'
            responses:
                '201':
                    description: 'Successful location creation'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'New location successfully saved to database.'
                                    location:
                                        type: object
                                        properties:
                                            building:
                                                $ref: '#/components/schemas/Location/properties/building'
                                            _id:
                                                type: string
                                                example: '60817ede81ae2cfcbf3f33fd'
                                            room:
                                                $ref: '#/components/schemas/Location/properties/room'
                                            floor:
                                                $ref: '#/components/schemas/Location/properties/floor'
                                            mazemap_link:
                                                $ref: '#/components/schemas/Location/properties/mazemap_link'
                                            mazemap_embed:
                                                $ref: '#/components/schemas/Location/properties/mazemap_embed'
                                            __v:
                                                type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to save the location. [SERVER ERROR MESSAGE]'
    /locations/{id}:
        get:
            summary: Get specific location
            tags:
                - locations
                - all
            description: Get specific location object by ID
            operationId: getLocation
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of location
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Location'
                '404':
                    description: No floors found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find location with ID 6086c0b2e00c2a888c26af05.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find location with ID 6086c0b2e00c2a888c26af05. [SERVER ERROR MESSAGE]'
    /locations/buildings:
        get:
            summary: List all buildings
            tags:
                - locations
                - all
            description: Get a list of all unique building numbers and names
            operationId: listBuildings
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        building:
                                            $ref: '#/components/schemas/Location/properties/building'
                '404':
                    description: Locations not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any buildings.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find buildings. [SERVER ERROR MESSAGE]'
    /locations/{building}/floors:
        get:
            summary: List all floors in a building
            tags:
                - locations
                - all
            description: Get a list of all unique floors in a building
            operationId: listFloors
            parameters:
                - name: building
                  in: path
                  required: true
                  description: Building number
                  schema:
                      type: string
                      example: 118
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Location/properties/floor'
                '404':
                    description: No floors found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any floors.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find floors. [SERVER ERROR MESSAGE]'
    /locations/{building}/{floor}/rooms:
        get:
            summary: List all rooms on specific floor of a building
            tags:
                - locations
                - all
            description: Get a list of all rooms on a floor in a specific building
            operationId: listRooms
            parameters:
                - name: building
                  in: path
                  required: true
                  description: Building number
                  schema:
                      type: string
                      example: 118
                - name: floor
                  in: path
                  required: true
                  description: Floor number
                  schema:
                      type: string
                      example: 2
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Location'
                '404':
                    description: No floors found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any rooms.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find the rooms. [SERVER ERROR MESSAGE]'
    /feedback:
        get:
            summary: List all feedback
            tags:
                - feedback
                - managers
            description: Get a list of all feedback objects in the database
            operationId: listFeedback
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        _id:
                                            $ref: '#/components/schemas/Feedback/properties/_id'
                                        name:
                                            $ref: '#/components/schemas/Feedback/properties/name'
                                        plant_id:
                                            type: object
                                            properties:
                                                _id:
                                                    type: string
                                                    example: '60856ac06bf41a7270f65e62'
                                                    description: 'ObjectID of the plant'
                                                name:
                                                    $ref: '#/components/schemas/Plant/properties/name'
                                        message_body:
                                            $ref: '#/components/schemas/Feedback/properties/message_body'
                                        createdAt:
                                            $ref: '#/components/schemas/Feedback/properties/createdAt'
                                        updatedAt:
                                            $ref: '#/components/schemas/Feedback/properties/updatedAt'
                                        __v:
                                            type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Feedback not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Could not find any feedback.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to find feedback. [SERVER ERROR MESSAGE]'
        post:
            summary: Add new feedback
            tags:
                - feedback
                - all
            description: Create new feedback and save to database
            operationId: createFeedback
            requestBody:
                description: Info about the feedback
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    $ref: '#/components/schemas/Feedback/properties/name'
                                plant_id:
                                    $ref: '#/components/schemas/Feedback/properties/plant_id'
                                message_body:
                                    $ref: '#/components/schemas/Feedback/properties/message_body'
            responses:
                '201':
                    description: Successfully created new feedback, returns the feedback and a success message.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'New feedback successfully saved to database.'
                                    feedback:
                                        $ref: '#/components/schemas/Feedback'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to save the feedback. [SERVER ERROR MESSAGE]'
    /feedback/{id}:
        get:
            summary: Get information about specific feedback
            tags:
                - feedback
                - managers
            description: Get information about specific feedback by its ID.
            operationId: getFeedback
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the feedback
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful query, returns the feedback object.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        $ref: '#/components/schemas/Feedback/properties/_id'
                                    name:
                                        $ref: '#/components/schemas/Feedback/properties/name'
                                    plant_id:
                                        type: object
                                        properties:
                                            _id:
                                                type: string
                                                example: '60856ac06bf41a7270f65e62'
                                                description: 'ObjectID of the plant'
                                            name:
                                                $ref: '#/components/schemas/Plant/properties/name'
                                    message_body:
                                        $ref: '#/components/schemas/Feedback/properties/message_body'
                                    createdAt:
                                        $ref: '#/components/schemas/Feedback/properties/createdAt'
                                    updatedAt:
                                        $ref: '#/components/schemas/Feedback/properties/updatedAt'
                                    __v:
                                        type: number
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: Could not find the feedback.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'No feedback with this ID.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while looking for feedback with ID 606b7b5993e1ee1504b037e1. [SERVER ERROR MESSAGE]'
        delete:
            summary: Delete feedback
            tags:
                - feedback
                - managers
            description: Delete specific feedback by ID
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ObjectID of the feedback
                  schema:
                      type: string
                      example: 6086c0b2e00c2a888c26af05
            operationId: deleteFeedback
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: 'Successfully deleted feedback.'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Successfully deleted feedback.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '404':
                    description: 'Could not find feedback'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'No feedback with this ID.'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to delete feedback. [SERVER ERROR MESSAGE]'
    /pictures:
        post:
            summary: Upload picture
            tags:
                - pictures
                - plants
                - managers
            description: Upload pictures of plants
            operationId: uploadFile
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successful upload
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'File successfully uploaded.'
                                    filename:
                                        type: string
                                        example: 'jade-plant.png'
                '400':
                    description: No file included
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'You need to include a file with your request.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to upload the file. [SERVER ERROR MESSAGE]'
        delete:
            summary: Delete picture file
            tags:
                - pictures
                - plants
                - managers
            description: Delete existing picture by filename
            operationId: deleteFile
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Successfully deleted file
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'File successfully deleted.'
                '400':
                    description: No filename included
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'You need to include a filename in your request.'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '500':
                    description: Server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                                        example: 'Something went wrong while trying to delete the file. [SERVER ERROR MESSAGE]'
components:
    schemas:
        Plant:
            description: Plants in the app
            type: object
            required:
                - name
                - location
                - health
            properties:
                name:
                    type: string
                    example: 'Jade Plant'
                    description: 'Should be unique'
                location:
                    type: string
                    description: ObjectID of the [room location](1.0.0#/Location) where the plant is located
                    example: 606b7b5993e1ee1504b037e1
                picture:
                    type: string
                    default: 'no-image.png'
                    example: 'jade-plant.jpg'
                notes:
                    type: string
                    description: 'Notes from managers to gardeners, not visible to un-registered users'
                    example: 'This plant should not be moved'
                health:
                    type: object
                    description: 'The plant needs'
                    required:
                        - water
                        - fertilizer
                        - light
                    properties:
                        water:
                            type: object
                            required:
                                - days_between
                                - amount
                                - due
                            properties:
                                days_between:
                                    type: number
                                    minimum: 1
                                    maximum: 365
                                    description: 'Number indicating how many days between each time the plant needs water'
                                amount:
                                    type: number
                                    minimum: 1
                                    maximum: 3
                                    description: "Number indicating how much water the plant needs.\n- 1: A little\n- 2: Medium\n- 3: Plenty"
                                due:
                                    type: string
                                    format: date-time
                                    description: 'Next date that the plant needs watering'
                        fertilizer:
                            type: object
                            required:
                                - days_between
                                - amount
                                - due
                            properties:
                                days_between:
                                    type: number
                                    minimum: 1
                                    maximum: 365
                                    description: 'Number indicating how many days between each time the plant needs fertilizing'
                                amount:
                                    type: number
                                    minimum: 1
                                    maximum: 3
                                    description: "Number indicating how much fertilizer the plant needs.\n- 1: A little\n- 2: Medium\n- 3: Plenty"
                                due:
                                    type: string
                                    format: date-time
                                    description: 'Next date that the plant needs fertilizing'
                        light:
                            type: object
                            required:
                                - amount
                            properties:
                                amount:
                                    type: number
                                    minimum: 1
                                    maximum: 5
                                    description: "Number indicating how much light the plant needs.\n- 1: Shade\n- 2: Half-shade\n- 3: Medium light\n- 4: Bright, indirect light\n- 5: Direct sunlight"
                history:
                    type: array
                    items:
                        type: object
                        required:
                            - type
                            - user_id
                            - date
                        properties:
                            type:
                                type: string
                                enum:
                                    - water
                                    - fertilize
                                    - move
                            user_id:
                                type: string
                                description: ObjectID of the [user](1.0.0#/Location) that performed the task
                                example: '606b7b5993e1ee1504b037e1'
                            date:
                                type: string
                                format: date-time
                            note:
                                type: string
                                description: 'Note added by user when moving a plant'
                createdAt:
                    type: string
                    format: date-time
                    description: 'Date of plant creation. This property is created automatically'
                updatedAt:
                    type: string
                    format: date-time
                    description: 'Date the plant object was last updated. This property is created and updated automatically'
        User:
            type: object
            description: Registered users of the app
            required:
                - email
                - password
                - name
                - role
            properties:
                email:
                    type: string
                    format: email
                    example: 'test@ntnu.no'
                password:
                    type: string
                    format: password
                    example: password1
                name:
                    type: object
                    required:
                        - first
                        - last
                    properties:
                        first:
                            type: string
                            example: 'Jane'
                        last:
                            type: string
                            example: 'Doe'
                role:
                    type: string
                    enum:
                        - manager
                        - gardener
                createdAt:
                    type: string
                    format: date-time
                    description: 'Date of user creation. This property is created automatically'
                updatedAt:
                    type: string
                    format: date-time
                    description: 'Date the user object was last updated. This property is created and updated automatically'
        Invite:
            description: Invites for new users
            type: object
            required:
                - email
                - role
                - invited_by
            properties:
                email:
                    type: string
                    format: email
                    example: 'new-user@ntnu.no'
                role:
                    type: string
                    enum:
                        - manager
                        - gardener
                invited_by:
                    type: string
                    example: '606b7b5993e1ee1504b037e1'
                    description: ObjectID of the [user](1.0.0#/User) that created the invite
                createdAt:
                    type: string
                    format: date-time
                    description: 'Date of invite creation. This property is created automatically'
                updatedAt:
                    type: string
                    format: date-time
                    description: 'Date the invite object was last updated. This property is created and updated automatically'
        Location:
            description: Locations where plants can be placed
            type: object
            required:
                - room
                - floor
                - building
                - mazemap_link
                - mazemap_embed
            properties:
                _id:
                    type: string
                    example: 6086c0b2e00c2a888c26af05
                room:
                    type: string
                    example: '215'
                    description: Name of the room. Set as string, since some rooms have both letters and numbers.
                floor:
                    type: number
                    example: 2
                    description: Which floor of the building
                building:
                    type: object
                    required:
                        - name
                        - no
                    properties:
                        name:
                            type: string
                            example: 'Teachers wing (118)'
                            description: Human-readable name for the building
                        no:
                            type: number
                            example: 118
                            description: The building number
                mazemap_link:
                    type: string
                    format: url
                    example: 'https://link.mazemap.com/ol0mQw1f'
                    description: Direct link to the room or point in Mazemap
                mazemap_embed:
                    type: string
                    format: url
                    example: 'https://use.mazemap.com/embed.html#v=1&config=ntnu&zlevel=2&center=10.675416,60.789249&zoom=19.6&campuses=ntnu&campusid=55&sharepoitype=poi&sharepoi=1137431&utm_medium=iframe'
                    description: Link that can be used as source in a MazeMap embedded map
                __v:
                    type: number
        Feedback:
            type: object
            description: Feedback sent from users of the app to the managers
            required:
                - name
                - plant_id
                - message_body
            properties:
                _id:
                    type: string
                    description: 'Unique identifier. ObjectID automatically generated by MongoDB'
                    example: '60856ac06bf41a7270f65e62'
                name:
                    type: string
                    description: 'Name of person who sends the feedback'
                    example: 'Michael'
                plant_id:
                    type: string
                    description: ObjectID of the [plant](1.0.0#/Plant) that the feedback is about
                    example: '606b7b5993e1ee1504b037e1'
                message_body:
                    type: string
                    description: 'The message from the user'
                    example: 'This plant looks like it is dying'
                createdAt:
                    type: string
                    format: date-time
                    description: 'Date and time the object was created. Automatically generated.'
                updatedAt:
                    type: string
                    format: date-time
                    description: 'Date and time the object was last updated. Automatically generated.'
                __v:
                    type: number
        ForgottenPassword:
            type: object
            description: Requests users make when they forget their passwords
            required:
                - user_id
            properties:
                _id:
                    type: string
                    description: 'Unique identifier. ObjectID automatically generated by MongoDB'
                    example: '60856ac06bf41a7270f65e62'
                user_id:
                    type: string
                    description: 'The Object ID representing the user the email belongs to'
                    example: '606b7b5993e1ee1504b037e1'
                createdAt:
                    type: string
                    format: date-time
                    description: 'Date and time the object was created. Automatically generated.'
                updatedAt:
                    type: string
                    format: date-time
                    description: 'Date and time the object was last updated. Automatically generated.'
                __v:
                    type: number
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    responses:
        UnauthorizedError:
            description: Access token is missing or invalid
